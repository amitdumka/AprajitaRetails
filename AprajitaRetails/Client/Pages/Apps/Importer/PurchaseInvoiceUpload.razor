@page "/import/purchaseimport"
@using AprajitaRetails.Shared.ViewModels
@using Syncfusion.XlsIO;
@using System.IO;
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Inputs
@using System.Data
@using System.Dynamic
@using System.Text.Json
@inject IJSRuntime JSRuntime
@inject DataHelper Helper
@inject ClientSetting Setting
@inject NavigationManager NavigationManager


<ContentHeader>
    <Header>
        <Blazor.AdminLte.PageTitle Title="Puchase Invoice Upload" />
    </Header>
</ContentHeader>

<ContentMain>

    <div classs="row">
        <SfUploader AutoUpload="false">
            <UploaderEvents ValueChange="OnChange"></UploaderEvents>
        </SfUploader>
        <div>
            <Button @onclick="UploadFile">Upload Purchase</Button>
        </div>
        @if (Columns != null)
        {
            <SfGrid @ref="Grid" DataSource="@purchaseList" AllowFiltering="true" AllowPaging="true">
                <GridColumns>
                    @{
                        foreach (var val in Columns)
                        {
                            <GridColumn Field="@val"></GridColumn>
                        }
                    }
                </GridColumns>
            </SfGrid>
        }
        else
        {
            <div>Upload an excel file to show grid</div>
        }
    </div>

    <div>
        @if (!string.IsNullOrEmpty(jsonData))
        {
            <p>@jsonData</p>
        }
        else
        {
            <hr/>
        }
    </div>

</ContentMain>

@code {
    //SfGrid<ExpandoObject> Grid;
    SfGrid<PurchaseData> Grid;
    string jsonData = "";

    public DataTable table = new DataTable();

    private async void UploadFile()
    {
        //Convert to JSON 
        //jsonData= Docs.DocIO.ObjectToJson<PurchaseData>(purchaseList);
        PurchaseUploadVM info = new() {
            StoreId="MBO", 
            PurchaseData=purchaseList
        };
        var flag=await  Helper.PostOperationsAsync("/api/Imports/PurchaseUpload", info, "PurchaseUploadVM");
        if (flag) jsonData = "Uploaded";
        StateHasChanged();

    }



    private async void OnChange(Syncfusion.Blazor.Inputs.UploadChangeEventArgs args)
    {

        try
        {


            foreach (var file in args.Files)
            {
                var path =@"c:\DevArea\"+file.FileInfo.Name;
                Console.WriteLine(path);
                ExcelEngine excelEngine = new ExcelEngine();
                IApplication application = excelEngine.Excel;
                application.DefaultVersion = ExcelVersion.Excel2016;
                FileStream openFileStream = new FileStream(path, FileMode.OpenOrCreate);
                //write the uploaded memorystream to file stream
                file.Stream.WriteTo(openFileStream);
                openFileStream.Close();
                //again open the filstream from that path
                FileStream fileStream = new FileStream(path, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
                //access the workbook from that filtestream
                IWorkbook workbook = application.Workbooks.Open(fileStream);
                IWorksheet worksheet = workbook.Worksheets[0];
                //get datatable from workbook
                table = worksheet.ExportDataTable(worksheet.UsedRange, ExcelExportDataTableOptions.ColumnNames);
                //convert to dynamic list and append to Grid.
                //                GenerateListFromTable(table);
                ConvertTableToObjectLust(table);
                //memoryStream.Close();

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);

        }
    }
    string[] Columns;
    public List<ExpandoObject> excelList;
    public List<PurchaseData> purchaseList;
    public void GenerateListFromTable(DataTable input)
    {
        var list = new List<ExpandoObject>();
        Columns = input.Columns.Cast<DataColumn>()
        .Select(x => x.ColumnName)
        .ToArray();
        foreach (DataRow row in input.Rows)
        {
            System.Dynamic.ExpandoObject e = new System.Dynamic.ExpandoObject();
            foreach (DataColumn col in input.Columns)
                e.TryAdd(col.ColumnName, row.ItemArray[col.Ordinal]);
            list.Add(e);
        }
        excelList = list;
    }

    public void ConvertTableToObjectLust(DataTable input)
    {
        Columns = input.Columns.Cast<DataColumn>()
       .Select(x => x.ColumnName)
       .ToArray();
        Console.WriteLine(Columns.ToString());
        var purchase = Docs.DocIO.ConvertDataTable<PurchaseData>(input);
        purchaseList = purchase; 
    }
}

