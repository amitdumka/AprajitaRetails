@page "/import/purchaseimport"
@using AprajitaRetails.Shared.Constants
@using AprajitaRetails.Shared.ViewModels.Imports
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Grids
@using Microsoft.AspNetCore.Authorization;
@using AprajitaRetails.Shared.Models.Inventory;
@using System.Text.Json
@using System.Reflection
@attribute [Authorize]

@inject DataHelper Helper
@inject ClientSetting Setting
@inject NavigationManager NavigationManager

<ContentHeader>
    <Header>
        <Blazor.AdminLte.PageTitle Title="Puchase Import" />
    </Header>
</ContentHeader>
<ContentMain>
    <div class="row">
        <div class="col-md-3"><Button OnClick="@Importdata">Import</Button></div>
        <div class="col-md-3"><Button OnClick="@ShowPurchaseInv">Show Purchase Invoices</Button></div>
        <div class="col-md-3"><Button OnClick="@ShowProcessData">Show Process Data</Button></div>

        <div class="col-md-3"><Button OnClick="@ProcessProductItems">Process ProductItem</Button></div>
        <div class="col-md-3"><Button OnClick="@ProcessPurchsase">Process Purchase Invoices</Button></div>
        <div class="col-md-3"><Button OnClick="@ProcessStocks">Process Stock</Button></div>
    </div>
    <div class="row">
        <div class="col-md-3">FileName:</div>
        <div class="col-md-3">
            @if (string.IsNullOrEmpty(fileName) == false)
            {
                <span class="text-success">@fileName</span>
            }
            else
            {
                <span class="text-danger">File is not set!</span>
            }
        </div>
    </div>

    <div class="row mt-lg-5">
        <div class="col-md-12">
            <SfTab CssClass=@("default-tab e-fill e-background")>
                <TabAnimationSettings>
                    <TabAnimationPrevious Effect=AnimationEffect.None></TabAnimationPrevious>
                    <TabAnimationNext Effect=AnimationEffect.None></TabAnimationNext>
                </TabAnimationSettings>
                <TabItems>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="Product Invoice Excel"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            @if (PurchaseInvoiceItems == null)
                            {
                                <span class="text-danager">No Data</span>
                            }
                            else
                            {

                                <EntityGridIndex TItem="PurchaseInvoiceItem" Title="Purchase Invoice Excel" Columns="@GridCols001" Baseurl="@BaseURL"
                                                 @bind-Entities="@PurchaseInvoiceItems" @bind-GroupedColumn="@GroupedColumn" Grouping=true></EntityGridIndex>


                            }
                        </ContentTemplate>
                    </TabItem>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="Purchase Item"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            @if (PurchaseItems == null)
                            {
                                <span class="text-danager">No Data</span>
                            }
                            else
                            {

                                <EntityGridIndex TItem="PurchaseItem" Title="" Columns="@GridCols004" Baseurl="@BaseURL"
                                                 @bind-Entities="@PurchaseItems" @bind-GroupedColumn="@GroupedColumn" Grouping=true></EntityGridIndex>



                            }
                        </ContentTemplate>

                    </TabItem>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="Stock"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            @if (Stocks == null)
                            {
                                <span class="text-danager">No Data</span>
                            }
                            else
                            {

                                <EntityGridIndex TItem="Stock" Title="" Columns="@GridCols005" Baseurl="@BaseURL"
                                                 @bind-Entities="@Stocks" @bind-GroupedColumn="@GroupedColumn" Grouping=true></EntityGridIndex>


                            }
                        </ContentTemplate>
                    </TabItem>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="Products"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            @if (ProductItems == null)
                            {
                                <span class="text-danager">No Data</span>
                            }
                            else
                            {
                                <EntityGridIndex TItem="ProductItem" Title="" Columns="@GridCols003" Baseurl="@BaseURL"
                                                 @bind-Entities="@ProductItems" @bind-GroupedColumn="@GroupedColumn" Grouping=true></EntityGridIndex>


                            }
                        </ContentTemplate>
                    </TabItem>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="Purchase Invoice"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            @if (PurchaseProducts == null)
                            {
                                <span class="text-danager">No Data</span>
                            }
                            else
                            {
                                <EntityGridIndex TItem="ProductPurchase" Title="" Columns="@GridCols002" Baseurl="@BaseURL"
                                                 @bind-Entities="@PurchaseProducts" @bind-GroupedColumn="@GroupedColumn" Grouping=true></EntityGridIndex>
                            }
                        </ContentTemplate>
                    </TabItem>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="Process Info"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            <H3>Return Data Message</H3>
                            <hr />
                            @if (string.IsNullOrEmpty(CommandProcessing) == false)
                            {
                                <H5>Command: @CommandProcessing</H5>
                                <hr />

                            }
                            @if (returnData != null)
                            {
                                <div class="row">
                                    <div class="col-md-3">Success: @returnData.Success</div>
                                    <div class="col-md-8">Message: @returnData.Message</div>
                                </div>
                                <div class="row">
                                    <div class="col-md-3">Error: @returnData.Error</div>
                                    <div class="col-md-8">Message: @returnData.ErrorMessage</div>
                                </div>
                                <div class="row">
                                    <div class="col-md-3">Success: @returnData.Added</div>
                                    <div class="col-md-3">Message: @returnData.Skipped</div>
                                    <div class="col-md-3">Message: @returnData.SavedToDB</div>

                                </div>
                            }
                        </ContentTemplate>
                    </TabItem>
                </TabItems>

            </SfTab>
        </div>
    </div>
</ContentMain>

@code {
    //Flags
    bool excelImported = false, productitem = false, pruchaseinv = false, stock = false;
    ReturnData? returnData;
    string CommandProcessing = "";
    List<GridColumn> GridCols001, GridCols002, GridCols003, GridCols004, GridCols005;
    string[] GroupedColumn;
    string BaseURL = "/import/purchaseimport";
    List<PurchaseItem> PurchaseItems;
    List<ProductPurchase> PurchaseProducts;
    List<ProductItem> ProductItems;
    List<Stock> Stocks;
    List<PurchaseInvoiceItem>? PurchaseInvoiceItems;
    string fileName = "";

    // SfGrid<PurchaseInvoiceItem>? Grid;

    async void ProcessProductItems()
    {
        CommandProcessing = "Processing Dry Run ProductItem";
        returnData = null;
        StateHasChanged();

        returnData = await Helper.GetRecordAsync<ReturnData>($"api/ImportHelper/ImportDryRun?mode=ProductItems&path={fileName}");
        StateHasChanged();

    }
    async void ProcessPurchsase()
    {
        //PurchaseInvoice
        CommandProcessing = "Processing Dry Run Pruchase Invoice.";
        returnData = null;
        StateHasChanged();

        returnData = await Helper.GetRecordAsync<ReturnData>($"api/ImportHelper/ImportDryRun?mode=PurchaseInvoice&path={fileName}");
        StateHasChanged();
    }
    async void ProcessStocks()

    {
        //Stocks
        CommandProcessing = "Processing Dry Run Stock";
        returnData = null;
        StateHasChanged();

        returnData = await Helper.GetRecordAsync<ReturnData>($"api/ImportHelper/ImportDryRun?mode=Stocks&path={fileName}");
        StateHasChanged();
    }





    protected override async Task OnInitializedAsync()
    {
        GroupedColumn = new string[0]; //new string[] { "VoucherType" };
        InitView();
        StateHasChanged();
    }
    void InitView()
    {
        GridCols001 = GenerateColums(typeof(PurchaseInvoiceItem).GetProperties(), nameof(PurchaseInvoiceItem.InwardNumber));
        GridCols002 = GenerateColums(typeof(ProductPurchase).GetProperties(), nameof(PurchaseInvoiceItem.InwardNumber));
        GridCols003 = GenerateColums(typeof(ProductItem).GetProperties(), nameof(ProductItem.Barcode));
        GridCols004 = GenerateColums(typeof(PurchaseItem).GetProperties(), nameof(PurchaseItem.InwardNumber));
        GridCols005 = GenerateColums(typeof(Stock).GetProperties(), nameof(Stock.Id));
    }


    protected ColumnType GetType(Type t)
    {
        if (t == typeof(string))
        {
            return ColumnType.String;
        }
        else if (t == typeof(DateTime))
        {
            return ColumnType.DateTime;
        }
        else if (t == typeof(bool)) return ColumnType.CheckBox;
        else if (t == typeof(decimal) || t == typeof(int) || t == typeof(double) || t == typeof(float))
            return ColumnType.Number;
        else return ColumnType.String;

    }
    List<GridColumn> GenerateColums(PropertyInfo[] infos, string idName)
    {
        var GridCols = new List<GridColumn>();
        foreach (var prop in infos)
        {
            if (prop.Name.EndsWith("Id") == false && prop.Name.EndsWith("ID") == false && prop.Name.EndsWith("id") == false)
            //&& prop.Name != "EmployeeId" && prop.Name != "TransactionId"
            //&& prop.Name != "TransactionMode" && prop.Name != "PartyId" && prop.Name != "StoreId")
            {
                var v = new GridColumn()
                    {
                        AutoFit = true,
                        DisplayAsCheckBox = prop.GetType() == typeof(bool) ? true : false,

                        Field = prop.Name,
                        Type = GetType(prop.GetType()),
                        EditType = EditType.DefaultEdit,
                        AllowSorting = true,
                        IsPrimaryKey = prop.Name == idName ? true : false,
                        AllowEditing = prop.CanWrite,
                        HeaderText = prop.Name,
                        HeaderTextAlign = Syncfusion.Blazor.Grids.TextAlign.Center
                    };
                if (prop.GetType() == typeof(decimal))
                {
                    if (prop.Name.Contains("Amount"))
                        v.Format = "C2";
                }

                GridCols.Add(v);
            }
        }
        return GridCols;
        // var CommandsList = new List<GridCommandColumn>();
        // var edit = new GridCommandColumn()
        //     {
        //         ID = "edit",
        //         Title = "Edit",
        //         Type = CommandButtonType.None,
        //         ButtonOption = new CommandButtonOptions() { IconCss = "e-icons e-edit", CssClass = "e-flat" }
        //     };
        // var delete = new GridCommandColumn()
        //     {
        //         ID = "delete",
        //         Title = "Delete",
        //         Type = CommandButtonType.None,
        //         ButtonOption = new CommandButtonOptions() { IconCss = "e-icons e-delete", CssClass = "e-flat" }
        //     };
        // var info = new GridCommandColumn()
        //     {
        //         ID = "info",
        //         Title = "Detail",
        //         Type = CommandButtonType.None,
        //         ButtonOption = new CommandButtonOptions() { IconCss = "e-icons e-update", CssClass = "e-flat" }
        //     };
        // CommandsList.Add(info);
        // CommandsList.Add(edit);
        // CommandsList.Add(delete);
        // var cCol = new GridColumn()
        //     {
        //         HeaderText = "Actions",
        //         AutoFit = true,
        //         Commands = CommandsList

        //     };
        // GridCols.Add(cCol);
    }

    void Importdata()
    {
        FetchDataAsync("ImportPurchase");
        StateHasChanged();
    }

    async void ShowPurchaseInv()
    {
        FetchDataAsync("PurchaseInvoice");
        // if(Grid!=null)
        // await Grid.AutoFitColumnsAsync();
        StateHasChanged();
    }
    void ShowProcessData()
    {

        FetchDataAsync("ProductPurchase");
        StateHasChanged();
        FetchDataAsync("PurchaseItem");
        StateHasChanged();
        FetchDataAsync("ProductItem");
        StateHasChanged();
        FetchDataAsync("Stocks");
        StateHasChanged();
    }

    async Task FetchDataAsync(string option)
    {
        switch (option)
        {
            case "ImportPurchase":
                fileName = await Helper.GetRecordAsStringAsync($"api/ImportHelper/purchaseimport?sc=ARJ");
                StateHasChanged();
                break;
            case "PurchaseInvoice":
                if (string.IsNullOrEmpty(fileName))
                {
                    Helper.Msg("Error", "File path is set yet...", true);
                    break;
                }
                var data = await Helper.GetRecordAsStringAsync($"api/ImportHelper/JsonDataFromFile?filename={Path.Combine(fileName, "wsheet", AKSConstant.PurchaseInvoice)}");
                PurchaseInvoiceItems = JsonSerializer.Deserialize<List<PurchaseInvoiceItem>>(data);
                StateHasChanged();
                //await Grid.AutoFitColumnsAsync();
                StateHasChanged();

                break;
            case "Stocks":
                if (string.IsNullOrEmpty(fileName))
                {
                    Helper.Msg("Error", "File path is set yet...", true);
                    break;
                }
                var stocks = await Helper.GetRecordAsStringAsync($"api/ImportHelper/JsonDataFromFile?filename={Path.Combine(fileName, AKSConstant.ImportedObjects, AKSConstant.Stocks)}");
                Stocks = JsonSerializer.Deserialize<List<Stock>>(stocks);
                StateHasChanged(); break;
            case "PurchaseItem":
                if (string.IsNullOrEmpty(fileName))
                {
                    Helper.Msg("Error", "File path is set yet...", true);
                    break;
                }
                var pi = await Helper.GetRecordAsStringAsync($"api/ImportHelper/JsonDataFromFile?filename={Path.Combine(fileName, AKSConstant.ImportedObjects, AKSConstant.PurchaseItems)}");
                PurchaseItems = JsonSerializer.Deserialize<List<PurchaseItem>>(pi);
                StateHasChanged(); break;

            case "ProductItem":
                if (string.IsNullOrEmpty(fileName))
                {
                    Helper.Msg("Error", "File path is set yet...", true);
                    break;
                }
                var item = await Helper.GetRecordAsStringAsync($"api/ImportHelper/JsonDataFromFile?filename={Path.Combine(fileName, AKSConstant.ImportedObjects, AKSConstant.ProductItems)}");
                ProductItems = JsonSerializer.Deserialize<List<ProductItem>>(item);
                StateHasChanged(); break;
            case "ProductPurchase":
                if (string.IsNullOrEmpty(fileName))
                {
                    Helper.Msg("Error", "File path is set yet...", true);
                    break;
                }
                var pp = await Helper.GetRecordAsStringAsync($"api/ImportHelper/JsonDataFromFile?filename={Path.Combine(fileName, AKSConstant.ImportedObjects, AKSConstant.ProductPurchase)}");
                PurchaseProducts = JsonSerializer.Deserialize<List<ProductPurchase>>(pp);
                StateHasChanged(); break;
            default:
                break;
        }
        // if (Grid != null)
        //    await Grid.AutoFitColumnsAsync();
        StateHasChanged();

    }

}
<style>
    .default-tab {
        border: 1px solid #d7d7d7;
    }

        .default-tab .e-content .e-item {
            padding: 10px;
            text-align: justify;
        }

    .default-tab-control-section {
        margin: 20px 20% 20px 20%;
    }

    @@media screen and (max-width: 480px) {
        .default-tab-control-section {
            margin: 20px 0 20px 0;
        }
    }

    .bootstrap5 .default-tab,
    .bootstrap5-dark .default-tab,
    .bootstrap .default-tab,
    .bootstrap-dark .default-tab,
    .bootstrap4 .default-tab {
        border: none;
    }

        .fluent .default-tab .e-content > .e-item.e-active,
        .bootstrap5 .default-tab .e-content > .e-item.e-active,
        .tailwind .default-tab .e-content > .e-item.e-active,
        .material .default-tab .e-content > .e-item.e-active,
        .bootstrap4 .default-tab .e-content > .e-item.e-active,
        .bootstrap .default-tab .e-content > .e-item.e-active,
        .fabric .default-tab .e-content > .e-item.e-active {
            background: #FAF9F8;
        }

        .fluent-dark .default-tab .e-content > .e-item.e-active,
        .bootstrap5-dark .default-tab .e-content > .e-item.e-active,
        .tailwind-dark .default-tab .e-content > .e-item.e-active,
        .material-dark .default-tab .e-content > .e-item.e-active,
        .bootstrap-dark .default-tab .e-content > .e-item.e-active,
        .fabric-dark .default-tab .e-content > .e-item.e-active,
        .highcontrast .default-tab .e-content > .e-item.e-active {
            background: #201F1E;
        }
</style>