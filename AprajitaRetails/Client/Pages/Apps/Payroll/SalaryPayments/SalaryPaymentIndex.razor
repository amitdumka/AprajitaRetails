@page "/payroll/SalaryPayments"

@using AprajitaRetails.Commons
@using AprajitaRetails.AdminLte
@using AprajitaRetails.Shared.Models.Payroll
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@using AprajitaRetails.Helpers
@using AprajitaRetails.Client.Helpers

@inject ClientSetting Setting
@inject DataHelper Helper

@attribute [Authorize]


<ContentMain>
    <EntityList Title="@Title" BaseUrl=@PageUrl Loading=@Loading>
        <TableHead>
            <TableHeadCell>ID</TableHeadCell>
            <TableHeadCell>Employee </TableHeadCell>
            <TableHeadCell> Componet</TableHeadCell>
            <TableHeadCell>  Month</TableHeadCell>
            <TableHeadCell> Date</TableHeadCell>
            <TableHeadCell>Amount </TableHeadCell>
            <TableHeadCell> Mode</TableHeadCell>
            <TableHeadCell>Details </TableHeadCell>
            <TableHeadCell> </TableHeadCell>
        </TableHead>
        <TableBody>
            @foreach (var ent in entities)
            {
                <TableRow>
                    <TableCell>@ent.SalaryPaymentId</TableCell>
                    <TableCell>@StaffName(ent.EmployeeId)</TableCell>
                    <TableCell>@ent.SalaryComponet.ToString()</TableCell>
                    <TableCell>@ent.SalaryMonth</TableCell>
                    <TableCell>@ent.OnDate.ToShortDateString()</TableCell>
                    <TableCell>@ent.Amount.ToString()</TableCell>
                    <TableCell>@ent.PayMode.ToString()</TableCell>
                    <TableCell>@ent.Details</TableCell>

                    <TableCell>  <ActionMenu Link=@PageUrl Id="@ent.SalaryPaymentId" OnClickDelete="()=>ConfirmDelete(ent.SalaryPaymentId)" /></TableCell>
                </TableRow>
            }
        </TableBody>
    </EntityList>
</ContentMain>

@code {

    private const string PageUrl = "/payroll/SalaryPayments";

    private const string Title = "Salary Payment";
    private List<SalaryPayment>? entities;

    private List<Employee>? employees;

    private bool Loading = true;
    
    private string StaffName(string id)
    {
        return employees != null ? employees.First(c => c.EmployeeId == id).StaffName : "";
    }

    async void ConfirmDelete(string id)
    {

        var flag = await Helper.DeleteAsync("SalaryPayments", "Salary Payment", id);

        if (flag)
        {
            entities.Remove(entities.First(c => c.SalaryPaymentId == id));
            StateHasChanged();
            Helper.Msg("Delete", $"{Title} {id} is deleted");
            StateHasChanged();
        }

    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!string.IsNullOrEmpty(Setting.StoreCode))
            {
                employees = await Helper.FetchAsync<Employee>("Employees/ByStore", $"?storeid={Setting.StoreCode}&isWorking=true");

                entities = await Helper.FetchAsync<SalaryPayment>("SalaryPayments/ByStore", $"?storeid={Setting.StoreCode}");
                Loading = false;
                StateHasChanged();
            }
            else
            {
                Helper.Msg("Error", "Store Code is not selected! Kindly re-login!", true);
            }
        }
        catch (Exception exception)
        {
            Helper.Msg("Error", exception.Message, true);
        }
    }

}