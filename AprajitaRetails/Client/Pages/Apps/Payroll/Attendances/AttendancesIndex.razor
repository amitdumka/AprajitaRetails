@page "/payroll/attendances"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using AprajitaRetails.Shared
@using AprajitaRetails.Shared.Models.Payroll
@using AprajitaRetails.AdminLte

@attribute [Authorize]
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@inject SfDialogService DialogService
@inject HttpClient Http

<ContentHeader>
    <Header>
        <Blazor.AdminLte.PageTitle Title=@Title />
    </Header>
</ContentHeader>
<ContentMain>

    @if (entities == null)
    {

        <p><em>Loading...</em></p>
    }
    else
    {
        <Row>
            <Card ToolOptions="new CardToolOptions {Collapsable = true,Maximizable=true }">
                <Title>
                    <CardTitle>@Title</CardTitle>

                </Title>
                <Header>
                    <CardTools>
                        <CustomTools>
                            <a class="btn btn-primary btn-xs btn" href="/payroll/attendances/edit/false">Add</a>
                        </CustomTools>
                    </CardTools>
                </Header>
                <Body>
                    <AprajitaRetails.AdminLte.Table.ATable Bordered=true Hover=true>
                        <TableHead>
                            @* <TableHeadCell>ID</TableHeadCell>*@
                            <TableHeadCell>Date</TableHeadCell>
                            <TableHeadCell>Name</TableHeadCell>
                            <TableHeadCell>Time</TableHeadCell>
                            <TableHeadCell>Status</TableHeadCell>
                            <TableHeadCell>Remarks</TableHeadCell>
                            @*<TableHeadCell>Store</TableHeadCell>*@
                            <TableHeadCell>     </TableHeadCell>
                        </TableHead>
                        <TableBody>

                            @foreach (var ent in entities)
                            {
                                <TableRow>
                                    @* <TableCell>@ent.AttendanceId</TableCell>*@
                                    <TableCell>@ent.OnDate.ToShortDateString()</TableCell>
                                    <TableCell>@StaffName(ent.EmployeeId)</TableCell>

                                    <TableCell>@ent.EntryTime</TableCell>

                                    <TableCell>@ent.Status</TableCell>
                                    <TableCell>@ent.Remarks</TableCell>
                                    @*<TableCell>@ent.StoreId</TableCell>*@
                                    <TableCell>
                                        <ActionMenu Link="/payroll/attendances" Id="@ent.AttendanceId" OnClickDelete="()=>ConfirmDelete(ent.AttendanceId)" />
                                    </TableCell>
                                </TableRow>
                            }
                        </TableBody>
                    </AprajitaRetails.AdminLte.Table.ATable>
                </Body>
            </Card>
        </Row>
    }

</ContentMain>

@code {

    private const string Title = "Attendances";
    private List<Attendance>? entities;
    private Employee[]? employees;

    private string StaffName(string id)
    {
        return employees != null ? employees.First(c => c.EmployeeId == id).StaffName : "";
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            employees = await Http.GetFromJsonAsync<Employee[]>("Employees");
            entities = await Http.GetFromJsonAsync<List<Attendance>>("Attendances");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    void OnDelete(string id)
    {
        Msg(id, "OnDelete");

    }
    async void ConfirmDelete(string id)
    {
        bool isConfirm = await DialogService.ConfirmAsync("Are you sure you want to permanently delete?", "Delete Attendance");
        //string confirmMessage = isConfirm ? "" : "canceled";
        if (isConfirm)
        {
            var result = await Http.DeleteAsync($"Attendances/{id}");
            if (result.IsSuccessStatusCode)
            {
                entities.Remove(entities.First(c => c.AttendanceId == id));
                StateHasChanged();
                Msg("Attendane Delete", $"Attendance {id} is deleted");
            }
            else
            {
                Msg("Attendane Delete", $" Error : Attendance {id} is not deleted", true);
            }
        }
    }
    void Msg(string title, string text, bool error = false)
    {
        var msg = new Radzen.NotificationMessage
            {
                Severity = error ? NotificationSeverity.Error : NotificationSeverity.Info,
                Summary = title,
                Detail = text,
                Duration = 14000
            };
        NotificationService.Notify(msg);
    }

}