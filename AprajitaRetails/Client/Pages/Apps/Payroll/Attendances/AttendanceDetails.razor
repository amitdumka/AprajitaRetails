@*@page "/payroll/attendances/detail/{ID:string?}"*@
@page "/payroll/attendances/detail/{*ID}"
@using AprajitaRetails.Helpers
@using AprajitaRetails.Shared.Models.Payroll
@using AprajitaRetails.AdminLte.Table
@using Microsoft.AspNetCore.Authorization
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@inject SfDialogService DialogService
@attribute [Authorize]
@inject HttpClient Http
@inject LocalStorageAccessor LocalStorage
<ContentHeader>
    <Header>
        <Blazor.AdminLte.PageTitle Title=@Title />
    </Header>
</ContentHeader>

<ContentMain>
    @if (entity == null)
    {
        <p><em>Loading.....</em></p>
    }
    else
    {
        <Row>
            <Column Classes="col._4">
                <Card ToolOptions="new CardToolOptions {Collapsable = true,Maximizable=true }">
                    <Title>
                        <CardTitle>@Title</CardTitle>
                    </Title>
                    <Header>
                        <CardTools />
                    </Header>
                    <Body>
                        <AprajitaRetails.AdminLte.Table.ATable Bordered=false Hover=false Small=true>
                            <TableBody>
                                <EntityRow Lable="ID" Value="@entity.AttendanceId" />
                                <EntityRow Lable="Date" Value="@entity.OnDate.ToString()" />
                                <EntityRow Lable="Name" Value="@entity.Employee.StaffName" />
                                <EntityRow Lable="Status" Value="@entity.Status.ToString()" />
                                <EntityRow Lable="Time" Value="@entity.EntryTime" />
                                <EntityRow Lable="Remarks" Value="@entity.Remarks" />
                                <EntityRow Lable="Tailor" Value="@entity.IsTailoring.ToString()" />
                                <EntityRow Lable="Store" Value="@entity.StoreId.ToString()" />
                                <TableRow><TableCell></TableCell> </TableRow>
                                <TableRow><TableCell></TableCell> </TableRow>
                                <TableRow>
                                    <TableCell><Button Size="Blazor.AdminLte.ButtonSize.Small" Color="Color.Info" @onclick="@BackButton">Back</Button></TableCell>
                                    @if (!isDeleted)
                                    {
                                        <TableCell><Button Size="Blazor.AdminLte.ButtonSize.Small" @onclick="@DeleteButton" Color="Color.Danger">Delete</Button></TableCell>
                                    }
                                </TableRow>
                            </TableBody>
                        </AprajitaRetails.AdminLte.Table.ATable>
                    </Body>
                </Card>
            </Column>

        </Row>
    }
</ContentMain>

@code {

    [Parameter] public string? ID { get; set; }
    Attendance? entity;
    bool isDeleted = false;
    string Title = "Detail";

    void DeleteButton()
    {
        ConfirmDelete(ID);
    }

    async void ConfirmDelete(string id)
    {
        try
        {

            bool isConfirm = await DialogService.ConfirmAsync("Are you sure you want to permanently delete ?", "Delete Attendance");
            if (isConfirm)
            {
                var result = await Http.DeleteAsync($"Attendances/{id}");
                if (result.IsSuccessStatusCode)
                {
                    isDeleted = true;
                    StateHasChanged();
                    Msg("Attendane Delete", $"Attendance {id} is deleted");

                }
                else
                {
                    Msg("Attendane Delete", $" Error : Attendance {id} is not deleted", true);
                }
            }
        }
        catch (Exception ex)
        {

            Msg("Error", ex.Message, true);
        }

    }
    void BackButton()
    {
        NavigationManager.NavigateTo("/payroll/attendances");
    }
    void Msg(string title, string text, bool isError = false)
    {
        var msg = new Radzen.NotificationMessage
        {
            Severity = isError ? NotificationSeverity.Error : NotificationSeverity.Info,
            Summary = title,
            Detail = text,
            Duration = 14000
        };
        NotificationService.Notify(msg);
    }

    protected override async void OnInitialized()
    {
        if (!string.IsNullOrEmpty(ID))
        {
            // Do Fetch Data from DB and Populate.
            //ID = ID ?? "NO ID Found";
            try
            {
                entity = await Http.GetFromJsonAsync<Attendance>($"Attendances/{ID}");
                //var emp = await Http.GetFromJsonAsync<Attendance>($"Employees/{entity.EmployeeId}");
                Title = "Detail Attendance of " + entity.Employee.StaffName;
                StateHasChanged();
            }catch(HttpRequestException e)
            {
                NavigationManager.NavigateTo("/payroll/attendances");
                Msg("Error", $"Attendance ID# {ID} not found!! and error is {e.Message}");
            }
        }
        else
        {
            //alert
            NavigationManager.NavigateTo("/payroll/attendances");
            Msg("Error", $"Attendance ID# {ID} not found!!");
        }
    }

}