@page "/reports/ledgerdetails"

@using Microsoft.AspNetCore.Authorization;
@using AprajitaRetails.Commons
@using AprajitaRetails.AdminLte
@using AprajitaRetails.Shared.Models.Banking
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@using AprajitaRetails.Shared.Models.Payroll;
@using Syncfusion.Blazor.Grids
@using System.Globalization;
@using AprajitaRetails.Shared.AutoMapper.DTO
@using AprajitaRetails.Shared
@using AprajitaRetails.Client.Helpers
@using AprajitaRetails.Shared.ViewModels
@using AprajitaRetails.Aks
@using System.Reflection

@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Calendars

@attribute [Authorize]

@inject DataHelper Helper
@inject ClientSetting Setting
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject NotificationService NotificationService
@inject SfDialogService DialogService
@inject HttpClient Http

<ContentHeader>
    <Header> <Blazor.AdminLte.PageTitle Title="@Title" /></Header>
</ContentHeader>

<ContentMain>
    <Row>
        <Column Classes="col.md">
            <div class="mb-3 row">
                <label for="Stores" class="col-sm-4 col-form-label">Store Groups</label>
                <div class="col-sm-6">
                    <SfComboBox TValue="string" TItem="SelectOption" Placeholder="Stores"
                                Autofill="true"
                                @bind-Value="@StoreGroupId" PopupHeight="230px"
                                DataSource="@StoreGroups">
                        <ComboBoxFieldSettings Text="Value" Value="ID" />
                    </SfComboBox>
                </div>
            </div>
        </Column>
        <Column Classes="col.md">
            <div class="mb-3 row">
                <label for="Store" class="col-sm-4 col-form-label">Store</label>
                <div class="col-sm-6">
                    <SfComboBox TValue="string" TItem="SelectOption" Placeholder="Store"
                                Autofill="true"
                                @bind-Value="@StoreId" PopupHeight="230px"
                                DataSource="@Stores">
                        <ComboBoxFieldSettings Text="Value" Value="ID" />
                    </SfComboBox>
                </div>
            </div>
        </Column>


        <Column Classes="col.md">
            <div class="mb-3 row">
                <label for="party" class="col-sm-4 col-form-label">Ledger</label>
                <div class="col-sm-6">
                    <SfComboBox TValue="string" TItem="SelectOption" Placeholder="Ledger"
                                Autofill="true"
                                @bind-Value="@PartyId" PopupHeight="230px"
                                DataSource="@Parties">
                        <ComboBoxFieldSettings Text="Value" Value="ID" />
                    </SfComboBox>
                </div>
            </div>
        </Column>
        <Column Classes="col.md">
            <div class="mb-3 row align-end">
                <div class="col-sm-2">
                    <Button Size="Blazor.AdminLte.ButtonSize.Small" Color="Color.Warning" @onclick="FetchRecordButton">Get</Button>
                </div>
            </div>

        </Column>




    </Row>
    <Row>
        @if (entity != null && entity.Count > 0)
        {

            int count = 1;
            intotal = 0; outtotal = 0;

            <div class="card   bg-primary">
                <div class="card-header">
                    <h3 class="card-title">Ledger Book  </h3>
                    <div class="card-tools">
                        <!-- Buttons, labels, and many other things can be placed here! -->
                        <!-- Here is a label for example -->
                        <span class="badge badge-primary">Close</span>
                    </div>
                    <!-- /.card-tools -->
                </div>
                <!-- /.card-header -->
                <div class="card-body">
                    Ledger Details [@Parties.FirstOrDefault(c => c.ID == PartyId).Value]
                    <Row>
                        <Column>
                            <Table>
                                <TableHead>
                                    <TableRow>
                                        <TableHeadCell>#</TableHeadCell>
                                        <TableHeadCell>Date</TableHeadCell>
                                        <TableHeadCell>Type</TableHeadCell>
                                        <TableHeadCell>Ref No</TableHeadCell>
                                        <TableHeadCell>Naration</TableHeadCell>
                                        <TableHeadCell>Payment Mode</TableHeadCell>
                                        <TableHeadCell>Details</TableHeadCell>
                                        <TableHeadCell>In Amount</TableHeadCell>
                                        <TableHeadCell>Out Amount</TableHeadCell>
                                    </TableRow>
                                </TableHead>
                                <TableBody>




                                    @foreach (var item in entity)
                                    {

                                        <TableRow>
                                            <TableCell>@(count++)</TableCell>
                                            <TableCell>@item.OnDate.ToShortDateString()</TableCell>
                                                <TableCell>@item.VoucherType</TableCell>
                                                <TableCell>@item.VoucherNumber</TableCell>
                                                <TableHeadCell>@item.Naration</TableHeadCell>
                                                <TableHeadCell>@item.PaymentMode</TableHeadCell>
                                                <TableHeadCell>@item.PaymentDetails</TableHeadCell>
                                                <TableCell>
                                                    @if (item.VoucherType == "Receipt" || item.VoucherType == "CashReceipt")
                                                {
                                                    intotal += item.Amount;
                                                    <span class="Text-Success">@item.Amount</span>
                                                }
                                                else
                                                {
                                                    <span>0</span>
                                                }
                                            </TableCell>
                                            <TableCell>
                                                @if (item.VoucherType != "Receipt" && item.VoucherType != "CashReceipt")
                                                {
                                                    outtotal += item.Amount;
                                                    <span class="text-danger">@item.Amount</span>
                                                }
                                                else
                                                {
                                                    <span class="Text-Secondary">0</span>
                                                }
                                            </TableCell>
                                        </TableRow>
                                    }


                                </TableBody>
                            </Table>
                        </Column>
                    </Row>

                </div>
                <!-- /.card-body -->
                <div class="card-footer align-content-end text-end ml-5 mr-5">
                    Ledger Total  <span class="text-success mr-5 ml-5">@intotal</span> <span class="text-warning mr-5 ml-5">@outtotal</span>
                </div>
                <!-- /.card-footer -->
            </div>
        }
    else{
        <span class="text-warning">No Option selected / No Data present</span>
    }
    </Row>
</ContentMain>

@code {
    private string StoreId, StoreGroupId, PartyId;
    private IList<SelectOption>? Stores;
    private IList<SelectOption>? StoreGroups;
    private IList<SelectOption>? Parties;
    private string Title = "Ledger Book";
    private const string URL = "api/Parties/ledgerdetails";
    //private DateTime OnDate = DateTime.Today;
    private List<LedgerDetail>? entity = null;
    private decimal intotal = 0, outtotal = 0;
    async void FetchRecordButton()
    {
        entity = await Helper.FetchAsync<LedgerDetail>($"{URL}", $"?storeid={StoreId}&ledgerid={PartyId}");
        StateHasChanged();

    }
    protected override async Task OnInitializedAsync()
    {
        try
        {

            await FetchDataAsync();
            StateHasChanged();
            base.OnInitialized();
        }
        catch (Exception exception)
        {

            Helper.Msg("Error On Init", exception.Message, true);
        }

    }

    async Task FetchDataAsync()
    {
        intotal = 0; outtotal = 0;
        Parties = await Helper.FetchOptionsAsync("Parties", Setting.StoreCode);
        Stores = await Helper.FetchOptionsAsync("Stores", "");
        StoreGroups = await Helper.FetchOptionsAsync("StoreGroups", "");
        StateHasChanged();
        await Task.Delay(5000);
        StateHasChanged();


    }

}
