@page "/sales/{Returns:bool}/{params}/Detail/{*Id}"

@using AprajitaRetails.Shared.Models.Stores
@using AprajitaRetails.Shared.AutoMapper.DTO
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using AprajitaRetails.AdminLte.Forms
@using Radzen.Blazor
@using AprajitaRetails.Shared.ViewModels
@using AprajitaRetails.Commons
@using AprajitaRetails.Shared.Models.Inventory
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Calendars
@using AprajitaRetails.Helpers
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@using AprajitaRetails.Aks
@using AprajitaRetails.Aks.Forms
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Popups

@attribute [Authorize]
@inject ClientSetting Setting
@inject DataHelper Helper

<ContentHeader>
    <Header>
        <Blazor.AdminLte.PageTitle Title=@Title />
    </Header>
</ContentHeader>
<ContentMain>
    @if (Loading)
    {
        <p><em> Loading......</em></p>
    }
    else
    {
        <Row>
            <Card ToolOptions="new CardToolOptions {Collapsable = true,Maximizable=true }">
                <Title>
                    <CardTitle>@Title</CardTitle>
                </Title>
                <Header>
                    <CardTools />
                </Header>
                <Body>
                    <AprajitaRetails.AdminLte.Table.ATable Bordered=true Hover=true Small=true>
                        <TableRow>
                            <TableCell>@Invoice.Invoice.InvoiceType</TableCell>
                            <TableCell>@Invoice.Invoice.InvoiceNo</TableCell>
                            <TableCell>@Invoice.Invoice.OnDate</TableCell>
                        </TableRow>
                        <TableRow>
                            <TableCell>@Invoice.Invoice.SalemanName.</TableCell>
                            <TableCell>@Invoice.Invoice.Paid.</TableCell>
                            <TableCell>@Invoice.Invoice.StoreName</TableCell>
                        </TableRow>
                        <TableRow>
                            <TableCell>@Invoice.Invoice.TotalQty</TableCell>
                            <TableCell>@Invoice.Invoice.BilledQty</TableCell>
                            <TableCell>@Invoice.Invoice.FreeQty</TableCell>
                        </TableRow>
                        <TableRow>
                            <TableCell>@Invoice.Invoice.TotalBasicAmount</TableCell>
                            <TableCell>@Invoice.Invoice.TotalTaxAmount</TableCell>
                            <TableCell>@Invoice.Invoice.TotalDiscountAmount</TableCell>
                        </TableRow>
                        <TableRow>
                            <TableCell>@Invoice.Invoice.TotalMRP</TableCell>
                            <TableCell>@Invoice.Invoice.RoundOff</TableCell>
                            <TableCell>@Invoice.Invoice.TotalPrice</TableCell>
                        </TableRow>
                        @*<TableRow>
                            <SfGrid TValue="List<SaleItemDTO>" DataSource="@Invoice.Items">

                            </SfGrid>
                        </TableRow>*@
                    </AprajitaRetails.AdminLte.Table.ATable>
                </Body>
            </Card>
        </Row>
    }
</ContentMain>

@code {
    [Parameter] public string ID { get; set; }
    [Parameter] public bool Returns { get; set; } = false;
    [Parameter] public string Params { get; set; } = "Regular";

    string Title = "Invoice Details";
    bool Loading = true;
    private ProductSale Inv;
    private List<SaleItem> SaleItems;
    private SalePaymentDetail? PaymentDetail;
    private CardPaymentDetail? CardPayment;

    private SaleDetailsDTO? Invoice;

    private async void FetchData()
    {
        try
        {
            Invoice = await Helper.GetRecordAsync<SaleDetailsDTO>("api/ProductSale/SaleDetails", ID);
            if (Invoice != null)
            {
                StateHasChanged();
            }

        }
        catch (Exception ex)
        {
            Helper.Msg("Error", ex.Message, true);
        }

    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            Invoice = await Helper.GetRecordAsync<SaleDetailsDTO>("api/ProductSale/SaleDetails", ID);
            if (Invoice != null)
            {
                StateHasChanged();
            }

        }
        catch (Exception ex)
        {
            Helper.Msg("Error", ex.Message, true);
        }
    }
}
