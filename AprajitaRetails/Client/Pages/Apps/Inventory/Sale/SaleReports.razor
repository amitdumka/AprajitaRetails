@page "/inventory/salereports"

@using System;
@using System.Globalization;
@using System.Reflection;
@using AprajitaRetails.Shared.AutoMapper.DTO;
@using AprajitaRetails.Shared.Models.Inventory;
@using AprajitaRetails.Shared.ViewModels;
@using Syncfusion.Blazor.Grids;
@using Syncfusion.Blazor.Grids.Internal;
@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Navigations;
@using AprajitaRetails.Shared.Models.Stores
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using AprajitaRetails.AdminLte.Forms
@using Radzen.Blazor
@using AprajitaRetails.Commons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Calendars
@using AprajitaRetails.Helpers
@using AprajitaRetails.Aks
@using AprajitaRetails.Aks.Forms
@using Syncfusion.Blazor.Popups

@attribute [Authorize]
@inject ClientSetting Setting
@inject DataHelper Helper
@inject Microsoft.JSInterop.IJSRuntime JS

<ContentHeader>
    <Header>
        <Blazor.AdminLte.PageTitle Title="Sale's Report" />
    </Header>
</ContentHeader>
<ContentMain>
<Row>
    <Column Classes="col.sm">
        <div class="mb-3 row">
            <label for="Store" class="col-sm-4 col-form-label">Store</label>
            <div class="col-sm-4">
                <SfComboBox TValue="string" TItem="SelectOption" Placeholder="Store"
                            Autofill="true"
                            @bind-Value="@StoreId" PopupHeight="230px"
                            DataSource="@Stores">
                    <ComboBoxFieldSettings Text="Value" Value="ID" />
                </SfComboBox>
            </div>
        </div>
    </Column>
</Row>
<Row>
    <Column Classes="col.sm">
        <div class="mb-3 row">
            <label for="Year" class="col-sm-4 col-form-label">Year</label>
            <div class="col-sm-4">
                <SfComboBox TValue="int" TItem="int" Placeholder="Year"
                            Autofill="true"
                            @bind-Value="Year" PopupHeight="230px"
                            DataSource="@YearList">
                    <ComboBoxFieldSettings Text="Value" Value="ID" />
                </SfComboBox>
            </div>
        </div>
    </Column>

</Row>
<Row>
    <Column Classes="col.sm">
        <div class="mb-3 row">
            <label for="Month" class="col-sm-4 col-form-label">Month</label>
            <div class="col-sm-4">
                <SfComboBox TValue="int" TItem="int" Placeholder="Month"
                            Autofill="true"
                            @bind-Value="@Month" PopupHeight="230px"
                            DataSource="@MonthList">
                    <ComboBoxFieldSettings   Text="Value" Value="Index" />
                </SfComboBox>
            </div>
        </div>
    </Column>
</Row>

<Row>
    <Column Classes="col.md">
        <div class="mb-3 row"><div class="col-sm-4">
            <button class="btn btn-small btn-warning" @onclick="@FetchExcel"> Get Excel</button>
                </div>
            </div>
    </Column>
</Row>
</ContentMain>
@code {

    IList<SelectOption>? Stores;
    IList<int>? YearList;
    IList<int>? MonthList = new List<int> { 1, 2, 3, 4, 5, 6,7,8,9,10,11,12};// "July", "Aug", "Sept", "Oct", "Nov","Dec" };
    string StoreId = "ARD";
    int Year = DateTime.Today.Year;
    int Month = DateTime.Today.Month;

    private async void FetchExcel()
    {
       // var x = await Helper.FetchFileAsync("importHelper/salerp", @$"?StoreId={Setting.StoreCode}&year={Year}&month={Month}");
        await JS.SaveAs($"SaleReports-For_{Year}_{Month}.xlsx", await Helper.FetchFileAsync("importHelper/salerp", @$"?StoreId={Setting.StoreCode}&year={Year}&month={Month}"));
    }
    protected override async Task OnInitializedAsync()
    {
        //await FetchSelectData();
        try
        {
            Stores = await Helper.FetchOptionsAsync("Stores", "");
            YearList = await Helper.FetchAsync<int>("api/ProductSales/YearList", $"?StoreId={Setting.StoreCode}");
            Year = DateTime.Today.Year;
            StateHasChanged();
        }
        catch (Exception e)
        {
            Helper.Msg("Error", e.Message, true);
        }

    }
    private async Task<bool> FetchSelectData()
    {
        try
        {
            YearList = await Helper.FetchAsync<int>("api/ProductSale/YearList", $"?StoreId={Setting.StoreCode}");
            Stores = await Helper.FetchOptionsAsync("Stores", "");
            StateHasChanged();
        }
        catch (Exception e)
        {
            Helper.Msg("Error", e.Message, true);
        }
        return true;
    }
    
}