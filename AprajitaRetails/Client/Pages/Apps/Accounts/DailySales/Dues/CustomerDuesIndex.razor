@page "/accounts/CustomerDues"

@using AprajitaRetails.Commons
@using AprajitaRetails.AdminLte
@using AprajitaRetails.Shared.Models.Stores
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;

@attribute [Authorize]
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@inject SfDialogService DialogService
@inject HttpClient Http
@inject LocalStorageAccessor LocalStorage

<ContentMain>
    <EntityList Title="@Title" BaseUrl="/accounts/CustomerDues" Loading=@Loading>
        <TableHead>
            <TableHeadCell>ID</TableHeadCell>
            <TableHeadCell>Employee </TableHeadCell>
            <TableHeadCell> Componet</TableHeadCell>
            <TableHeadCell>  Month</TableHeadCell>
            <TableHeadCell> Date</TableHeadCell>
            <TableHeadCell>Amount </TableHeadCell>
            <TableHeadCell> Mode</TableHeadCell>
            <TableHeadCell>Details </TableHeadCell>
            <TableHeadCell> </TableHeadCell>
        </TableHead>
        <TableBody>
            @foreach (var ent in entities)
            {
                <TableRow>
                    <TableCell>@ent.InvoiceNumber</TableCell>
                    <TableCell>@ent.OnDate.ToShortDateString()</TableCell>
                    <TableCell>@ent.Amount.ToString()</TableCell>
                    <TableCell>@ent.Paid.ToString()</TableCell>
                    <TableCell>@ent.ClearingDate.ToString()</TableCell>
                    <TableCell>
                        @if (!ent.Paid)
                        {
                            NoofDays(ent.OnDate);
                        }
                    </TableCell>
                    <TableCell>@ent.StoreId.ToString()</TableCell>
                    <TableCell>  <ActionMenu Link="/accounts/CustomerDues" Id="@ent.InvoiceNumber" OnClickDelete="()=>ConfirmDelete(ent.InvoiceNumber)" /></TableCell>
                </TableRow>
            }
        </TableBody>
    </EntityList>
</ContentMain>

@code {
    private const string Title = "Customer Dues";
    private List<CustomerDue>? entities;
    private bool Loading = true;

    private string NoofDays(DateTime dt)
    {
        var x = dt - DateTime.Today;
        return x.TotalDays.ToString();
    }

    async void ConfirmDelete(string id)
    {
        bool isConfirm = await DialogService.ConfirmAsync("Are you sure you want to permanently delete?", "Delete ");

        if (isConfirm)
        {
            var result = await Http.DeleteAsync($"CustomerDues/{id}");
            if (result.IsSuccessStatusCode)
            {
                entities.Remove(entities.First(c => c.InvoiceNumber == id));
                StateHasChanged();
                Msg("  Delete", $"  {id} is deleted");
            }
            else
            {
                Msg("  Delete", $" Error :   {id} is not deleted", true);
            }
        }
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            entities = await Http.GetFromJsonAsync<List<CustomerDue>>("CustomerDues");
            Loading = false;
            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
    void Msg(string title, string text, bool error = false)
    {
        var msg = new Radzen.NotificationMessage
        {
            Severity = error ? NotificationSeverity.Error : NotificationSeverity.Info,
            Summary = title,
            Detail = text,
            Duration = 14000
        };
        NotificationService.Notify(msg);
    }

}