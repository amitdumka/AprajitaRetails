@page "/accounts/DueRecoveries/detail/{*ID}"

@using AprajitaRetails.Shared.Models.Payroll
@using AprajitaRetails.Shared.Models.Stores

@using AprajitaRetails.Commons
@using AprajitaRetails.AdminLte.Table
@using Microsoft.AspNetCore.Authorization

@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@inject SfDialogService DialogService
@attribute [Authorize]
@inject HttpClient Http
@inject LocalStorageAccessor LocalStorage

<EntityDetails Title="@Title" Loading=@Loading OnBack="BackButton" OnDelete="DeleteButton" @bind-Deleted="@isDeleted">
     
    <EntityRow Lable="ID" Value="@entity.InvoiceNumber" />
    <EntityRow Lable="Date" Value="@entity.OnDate.ToShortDateString()" />
    <EntityRow Lable="Amount" Value="@entity.Amount.ToString()" />

    @*<EntityRow Lable="Due Amount" Value="@entity.Due.ToString()" />*@
    <EntityRow Lable="Payment Mode" Value="@entity.PayMode.ToString()" />
    <EntityRow Lable="PartialPayment " Value="@entity.PartialPayment.ToString()" />
    <EntityRow Lable="Remarks" Value="@entity.Remarks" />
    <EntityRow Lable="Store" Value="@entity.StoreId" />

</EntityDetails>

@code {
    [Parameter] public string? ID { get; set; }

    DueRecovery? entity;
    
    string Title = "Details";
    bool Loading = true;
    bool isDeleted = false;
    void BackButton() { NavigationManager.NavigateTo("/accounts/DueRecoveries"); }

    protected override async void OnInitialized()
    {
        if (!string.IsNullOrEmpty(ID))
        {

            entity = await Http.GetFromJsonAsync<DueRecovery>($"DueRecoveries/{ID}");
            Title = "Due Recovery Details of " + entity.InvoiceNumber;
            Loading = false;
            StateHasChanged();
        }
        else
        {
            //alert
        }
    }
    async void DeleteButton()
    {
        try
        {

            bool isConfirm = await DialogService.ConfirmAsync("Are you sure you want to permanently delete ?", "Delete");
            if (isConfirm)
            {
                var result = await Http.DeleteAsync($"DueRecoveries/{ID}");
                if (result.IsSuccessStatusCode)
                {
                    isDeleted = true;
                    StateHasChanged();
                    Msg("Delete", $"Due Recovery  {ID} is deleted");

                }
                else
                {
                    Msg(" Delete", $" Error : Due Recovery {ID} is not deleted", true);
                }
            }
        }
        catch (Exception ex)
        {

            Msg("Error", ex.Message, true);
        }

    }

    void Msg(string title, string text, bool isError = false)
    {
        var msg = new Radzen.NotificationMessage
        {
            Severity = isError ? NotificationSeverity.Error : NotificationSeverity.Info,
            Summary = title,
            Detail = text,
            Duration = 14000
        };
        NotificationService.Notify(msg);
    }

}