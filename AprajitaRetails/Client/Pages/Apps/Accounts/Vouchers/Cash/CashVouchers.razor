@page "/vouchers/cash"

@using AprajitaRetails.Shared.Models.Vouchers;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using AprajitaRetails.Shared
@using AprajitaRetails.Client.Helpers

@inject ClientSetting Setting
@attribute [Authorize]
@inject HttpClient Http
@inject NotificationService NotificationService

<ContentHeader>
    <Header>
        <Blazor.AdminLte.PageTitle Title="Cash Vouchers" />
    </Header>
</ContentHeader>
<ContentMain>
    @if (vchlist == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <Row>
            <Card ToolOptions="new CardToolOptions {Collapsable = true,Maximizable=true }">
                <Title>
                    <CardTitle>Cash Vouchers</CardTitle>

                </Title>
                <Header>
                    <CardTools>
                        <CustomTools>
                            <a class="btn btn-primary btn-xs btn" href="/vouchers/cash/edit">Add</a>
                        </CustomTools>
                    </CardTools>
                </Header>
                <Body>
                    <AprajitaRetails.AdminLte.Table.ATable Bordered=true Hover=true Small=true>
                        <caption >Record Count: @vchlist.Count() .</caption>
                        <TableHead>
                            <TableHeadCell>Type</TableHeadCell>
                            <TableHeadCell>Date</TableHeadCell>
                            <TableHeadCell>VoucherNo</TableHeadCell>
                            <TableHeadCell>Party Name</TableHeadCell>
                            <TableHeadCell>Particulars</TableHeadCell>
                            <TableHeadCell>Amount</TableHeadCell>
                            <TableHeadCell>Category</TableHeadCell>
                            <TableHeadCell>Remarks</TableHeadCell>
                            <TableHeadCell>Issued By</TableHeadCell>
                            <TableHeadCell>Slip No</TableHeadCell>
                            <TableHeadCell> </TableHeadCell>
                        </TableHead>
                        <TableBody>

                            @foreach (var vch in vchlist)
                            {
                                <TableRow>
                                    <TableCell>@vch.VoucherType</TableCell>
                                    <TableCell>@vch.OnDate.ToShortDateString()</TableCell>
                                    <TableCell>@vch.VoucherNumber</TableCell>
                                    <TableCell>@vch.PartyName</TableCell>
                                    <TableCell>@vch.Particulars</TableCell>
                                    <TableCell>@vch.Amount</TableCell>
                                    <TableCell>@ModeName(vch.TransactionId)</TableCell>
                                    <TableCell>@vch.Remarks</TableCell>
                                    <TableCell>@vch.EmployeeId</TableCell>
                                    <TableCell>@vch.SlipNumber</TableCell>
                                    <TableCell>
                                        <AprajitaRetails.AdminLte.ActionMenu Link="/vouchers/cash" Id="@vch.VoucherNumber" />
                                    </TableCell>
                                </TableRow>
                            }
                        </TableBody>
                    </AprajitaRetails.AdminLte.Table.ATable>
                </Body>
            </Card>
        </Row>
    }
</ContentMain>
@code {
    private CashVoucher[]? vchlist;
    private TransactionMode[]? modeList;

    private string ModeName(string id)
    {
        return modeList.First(c => c.TransactionId == id).TransactionName;
    }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Setting.StoreCode))
        {
            Msg("Error", "Select store!, Kindly re-login", true);
            return;
        }
        try
        {
            vchlist = await Http.GetFromJsonAsync<CashVoucher[]>($"CashVouchers/bystore?storeid={Setting.StoreCode}");
            modeList = await Http.GetFromJsonAsync<TransactionMode[]>("TransactionModes");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

    }
    void Msg(string title, string text, bool error = false)
    {
        var msg = new Radzen.NotificationMessage
            {
                Severity = error ? NotificationSeverity.Error : NotificationSeverity.Info,
                Summary = title,
                Detail = text,
                Duration = 14000
            };
        NotificationService.Notify(msg);
    }
}