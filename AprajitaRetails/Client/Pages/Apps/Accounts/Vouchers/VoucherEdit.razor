@page "/vouchers/edit"
@using AprajitaRetails.Shared.Models.Vouchers
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using AprajitaRetails.AdminLte.Forms
@attribute [Authorize]
@inject HttpClient Http
@inject NotificationService NotificationService

<ContentHeader>
    <Header>
        <Blazor.AdminLte.PageTitle Title=@Title />
    </Header>
</ContentHeader>


<ContentMain>
    <Row>
        <Column Classes="col.md._6">
            <EditForm Model=@ModeT OnValidSubmit=@SaveButton OnInvalidSubmit=@ErrorMsg>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <Card ToolOptions="new CardToolOptions { Collapsable = true, Maximizable=true}">
                    <Title><CardTitle>Add Voucher</CardTitle></Title>
                    <Header><CardTools /></Header>
                    <Body>
                        <Row>
                            <Column>
                                <ASelect Label="Voucher Type" Name="VoucheType" TItem="string" Items="vchTypes" Selector="(x => x)" />
                            </Column>
                            <Column>
                                @if (IsEdit)
                                {
                                    <ATextInput @bind-Value=@voucher.VoucherNumber Name="VoucherNumber" Label="Voucher Number" />
                                }
                            </Column>
                        </Row>
                        <Row>
                            <Column>
                                <ATextInput @bind-Value=@voucher.StoreId Name="Store" Label="Store" />
                            </Column>
                            <Column>
                                Date:
                                <InputDate @bind-Value=@voucher.OnDate DisplayName="OnDate" />
                            </Column>
                        </Row>
                        <Row>
                            <Column>
                                <ATextInput @bind-Value=@voucher.PartyName Name="PartyName" Label="PartyName" />
                            </Column>
                            <Column><ATextInput @bind-Value=@voucher.Particulars Name="Particulars" Label="Particulars" /></Column>
                        </Row>
                        <Row>
                            <Column><AInputNumber @bind-Value=@voucher.Amount Name="AccountId" Label="Amount" /></Column>
                            <Column><ATextInput @bind-Value=@voucher.Remarks Name="SlipNo" Label="Slip No" /></Column>
                        </Row>
                        <Row>
                            <Column><ATextInput @bind-Value=@voucher.PartyId Name="Party" Label="Party" /></Column>
                            <Column><ATextInput @bind-Value=@voucher.EmployeeId Name="Issude" Label="Issued By" /></Column>
                        </Row>
                        <Row>
                            <Column><ATextInput @bind-Value=@voucher.AccountId Name="AccountId" Label="Account No" /></Column>
                            <Column><ATextInput @bind-Value=@voucher.SlipNumber Name="SlipNo" Label="Slip No" /></Column>
                        </Row>
                        <Row>
                            <Column>
                                <ASelect Label="Payment Mode" Name="PayMode" TItem="string" Items="payModes" Selector="(x => x)" />
                            </Column>
                            <Column><ATextInput @bind-Value=@voucher.PaymentDetails Name="Details" Label="Payment Details" /></Column>
                        </Row>
                    </Body>
                    <Footer>
                        <Column Classes="col.md._3">
                            @*<Button Size=Blazor.AdminLte.ButtonSize.Medium Color="Color.Danger" OnClick=@SaveButton>Save</Button>*@
                            <ASubmitButton Title="Save" />
                        </Column>
                    </Footer>
                </Card>
            </EditForm>
        </Column>
    </Row>
</ContentMain>




@code {
    //TODO: Use bind value in place change in ASelect and See what happen 
    [Parameter]
    public VoucherType VoucherType { get; set; } = VoucherType.Payment;
    [Parameter]
    public string VoucherNumber { get; set; } = "";
    [Parameter]
    public bool IsEdit { get; set; } = false;

    private TransactionMode ModeT = new TransactionMode();

    IList<string> payModes = Enum.GetNames(typeof(PaymentMode));
    IList<string> vchTypes = Enum.GetNames(typeof(VoucherType));

    string _selectedStringItem;
    void onPayModeChange(string value) => _selectedStringItem = value;
    //string _selectedStringItem;
    void onVoucherChange(string value) => _selectedStringItem = value;


    private Voucher voucher = new Voucher
    {
        OnDate = DateTime.Now,
        VoucherType = VoucherType.Payment,
        AccountId = "",
        Amount = 0,
        EmployeeId = "",
        EntryStatus = EntryStatus.Added,
        IsReadOnly = false,
        MarkedDeleted = false,
        PartyId = "",
        PartyName = "",
        PaymentDetails = "",
        Remarks = "",
        SlipNumber = "",
        PaymentMode = PaymentMode.Cash,
        StoreId = "",
        UserId = "",
        VoucherNumber = ""
    };
    private string Title = "Voucher";
    void ErrorMsg()
    {
        var msg = new Radzen.NotificationMessage
        {
            Severity = NotificationSeverity.Info,
            Summary = "Error",
            Detail = "Invalid Sate",
            Duration = 4000
        };
        NotificationService.Notify(msg);
    }
    void SaveButton()
    {
        Save();

    }

    //private void Save(){}
    private async void Save()
    {
        var result = await Http.PostAsJsonAsync<Voucher>("TransactionModes", voucher);


        if (result.IsSuccessStatusCode)
        {
            var msg = new Radzen.NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Summary = "Info",
                Detail = "Voucher is added",
                Duration = 4000
            };
            NotificationService.Notify(msg);

        }
        else
        {
            var msg = new Radzen.NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Summary = "Error",
                Detail = "An error occured while saving and error is " + result.StatusCode.ToString(),
                Duration = 4000
            };
            NotificationService.Notify(msg);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        voucher.VoucherType = VoucherType;
        if (IsEdit)
        {
            Title = "Edit Voucher #" + VoucherNumber;
        }
        else Title = "Add " + Title;
    }

    //Swal.fire('Any fool can use a computer')

}

