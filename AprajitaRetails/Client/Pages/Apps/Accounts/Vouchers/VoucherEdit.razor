@page "/vouchers/edit"
@using AprajitaRetails.Shared.Models.Vouchers
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using AprajitaRetails.AdminLte.Forms
@using Radzen.Blazor
@using AprajitaRetails.Shared.ViewModels
@attribute [Authorize]
@inject HttpClient Http
@inject NotificationService NotificationService

<ContentHeader>
    <Header>
        <Blazor.AdminLte.PageTitle Title=@Title />
    </Header>
</ContentHeader>

<ContentMain>
    <Row>
        <Column Classes="col.lg.auto">
            <EditForm Model=@voucher OnValidSubmit=@SaveButton OnInvalidSubmit=@ErrorMsg>

                <DataAnnotationsValidator />
                <ValidationSummary />

                <Card ToolOptions="new CardToolOptions { Collapsable = true, Maximizable=true}">
                    <Title><CardTitle>@Title</CardTitle></Title>
                    <Header><CardTools /></Header>
                    <Body>

                        <Row>
                            <Column Classes="col.lg">
                                <RadzenRadioButtonList Orientation="Orientation.Horizontal" TValue="int" @bind-Value=@SelectedVCHType Change=@((args) => OnVoucherTypeChange(args, "VoucherType"))>
                                    <Items>
                                        <RadzenRadioButtonListItem Text="Payment" Value="0" />
                                        <RadzenRadioButtonListItem Text="Receipts" Value="1" />
                                        <RadzenRadioButtonListItem Text="Expenses" Value="6" />
                                    </Items>
                                </RadzenRadioButtonList>
                            </Column>
                            <Column Classes="col.md">
                                <ASelect ValueChanged="@OnStoreSelected" Label="Store" Name="Stores" TItem="SelectOption" Items="Stores" Selector="(x => x.Value)" />
                            </Column>
                        </Row>
                        <Row>
                            <Column Classes="col.md">
                                <div class="mb-3 row">
                                    <label for="ondate" class="col-sm-4 col-form-label">Date</label>
                                    <div class="col-sm-6">
                                        <RadzenDatePicker @bind-Value=@voucher.OnDate id="ondate" Change=@OnDateChange />
                                    </div>
                                </div>
                            </Column>
                            <Column Classes="col.md"><ATextInput @bind-Value=@voucher.SlipNumber Name="SlipNo" Label="Slip No" /></Column>
                            <Column Classes="col.md">
                                <ATextInput @bind-Value=@voucher.PartyName Name="PartyName" Label="Party Name" />
                            </Column>
                        </Row>
                        <Row>
                            <Column Classes="col.md"><ATextInput @bind-Value=@voucher.Particulars Name="Particulars" Label="Particulars" /></Column>
                            <Column Classes="col.md"><AInputNumber @bind-Value=@voucher.Amount Name="Amount" Label="Amount" /></Column>
                            <Column Classes="col.md">
                                <ASelect Label="Payment Mode" Name="PayMode" TItem="string" Items="payModes" Selector="(x => x)" ValueChanged="@onPayModeChange" />
                            </Column>

                        </Row>
                        <Row>
                            <Column Classes="col.md">
                                <ASelect ValueChanged="@OnAccountSelected" Label="Account No" Name="AccountNo" TItem="SelectOption" Items="Accounts" Selector="(x => x.Value)" />
                            </Column>

                            <Column Classes="col.md">
                                <ATextInput @bind-Value=@voucher.PaymentDetails Name="Details" Label="Payment Details" />
                            </Column>

                            <Column Classes="col.md">
                                <ASelect Label="Ledger" Name="Party" TItem="SelectOption" Items="Parties" Selector="(x => x.Value)" ValueChanged="@OnPartySelected" />
                            </Column>
                        </Row>
                        <Row>
                            <Column Classes="col.md">
                                <ATextInput @bind-Value=@voucher.Remarks Name="Remarls" Label="Remarks" />
                            </Column>
                            <Column Classes="col.md">
                                <ASelect Label="Issued By" Name="Employee" TItem="SelectOption" Items="Employees" Selector="(x => x.Value)" ValueChanged="@OnEmployeeSelected" />
                            </Column>
                            <Column Classes="col.sm"></Column>
                        </Row>


                    </Body>
                    <Footer>
                        <Column Classes="col.md._3">
                            <ASubmitButton Title="Save" />
                        </Column>
                    </Footer>
                </Card>
            </EditForm>
        </Column>
    </Row>
</ContentMain>




@code {
    //TODO: Use bind value in place change in ASelect and See what happen
    private string Title = "Voucher";

    [Parameter] public VoucherType VoucherType { get; set; } = VoucherType.Payment;
    [Parameter] public string ID { get; set; } = "";
    [Parameter] public bool IsEdit { get; set; } = false;
    [Parameter] public Voucher? EditVoucher { get; set; }
    private Voucher voucher = new Voucher { VoucherType = VoucherType.Payment, OnDate = DateTime.Now, Amount = 0 };

    int SelectedVCHType = 0;
    IList<string> payModes = Enum.GetNames(typeof(PaymentMode));
    private IList<SelectOption>? Stores;
    private IList<SelectOption>? Employees;
    private IList<SelectOption>? Parties;
    private IList<SelectOption>? Accounts;

    // On Init and Fetch Data
    protected override async Task OnInitializedAsync()
    {
        await FetchSelectData();
        if (!string.IsNullOrEmpty(ID))
        {
            Title = Title + " #VCHNo: " + ID;
        }
        if (IsEdit)
        {
            Title = "Edit Voucher #" + ID;
            voucher = EditVoucher;
        }
        else
        {
            Title = "Add " + Title;
            voucher = new Voucher
                {
                    OnDate = DateTime.Now,
                    VoucherType = VoucherType.Payment,
                    AccountId = Accounts[0].ID,
                    Amount = 0,
                    EmployeeId = Employees[0].ID,
                    EntryStatus = EntryStatus.Added,
                    IsReadOnly = false,
                    MarkedDeleted = false,
                    PartyId = Parties[0].ID,
                    PartyName = "",
                    PaymentDetails = "",
                    Remarks = "",
                    SlipNumber = "",
                    PaymentMode = PaymentMode.Cash,
                    StoreId = Stores[0].ID,
                    UserId = "BlazorUI",
                    VoucherNumber = " ",
                    Particulars = ""

                };
        }
        voucher.VoucherType = VoucherType;
        SelectedVCHType = (int)VoucherType;
    }
    private async Task<bool> FetchSelectData()
    {
        try
        {
            Stores = await Http.GetFromJsonAsync<IList<SelectOption>>("Helper/Stores");
            Employees = await Http.GetFromJsonAsync<SelectOption[]>("Helper/Employees?storeid=all");
            Parties = await Http.GetFromJsonAsync<SelectOption[]>("Helper/Parties?storeid=ARD");
            Accounts = await Http.GetFromJsonAsync<SelectOption[]>("Helper/BankAccounts?storeid=ARD");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        return true;

    }
    //Swal.fire('Any fool can use a computer')


    //Value Change Handler
    void OnDateChange(DateTime? value) => voucher.OnDate = value.Value;
    void OnVoucherTypeChange(int? value, string name) => voucher.VoucherType = (VoucherType)value;
    void onPayModeChange(string value) => voucher.PaymentMode = (PaymentMode)payModes.IndexOf(value);
    void OnStoreSelected(SelectOption value) => voucher.StoreId = value.ID;
    void OnEmployeeSelected(SelectOption value) => voucher.EmployeeId = value.ID;
    void OnPartySelected(SelectOption value) => voucher.PartyId = value.ID;
    void OnAccountSelected(SelectOption value) => voucher.AccountId = value.ID;

    //Save Operations
    void ErrorMsg()
    {
        var msg = new Radzen.NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Summary = "Error",
                Detail = "Invalid Sate",
                Duration = 14000
            };
        NotificationService.Notify(msg);
    }
    void SaveButton()
    {
        Save();

    }

    //private void Save(){}
    private async void Save()
    {
        var result = await Http.PostAsJsonAsync<Voucher>("api/Vouchers", voucher);


        if (result.IsSuccessStatusCode)
        {
            var msg = new Radzen.NotificationMessage
                {
                    Severity = NotificationSeverity.Info,
                    Summary = "Info",
                    Detail = "Voucher is added",
                    Duration = 4000
                };
            NotificationService.Notify(msg);

        }
        else
        {
            var msg = new Radzen.NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "An error occured while saving and error is " + result.StatusCode.ToString() + "\n" + result.ReasonPhrase,
                    Duration = 4000
                };
            NotificationService.Notify(msg);
        }
    }




}

