@page "/vouchers/edit"
@using AprajitaRetails.Shared.Models.Vouchers
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using AprajitaRetails.AdminLte.Forms
@attribute [Authorize]
@inject HttpClient Http
@inject NotificationService NotificationService
@using Radzen.Blazor

<ContentHeader>
    <Header>
        <Blazor.AdminLte.PageTitle Title=@Title />
    </Header>
</ContentHeader>

<ContentMain>
    <Row>
        <Column Classes="col.lg.auto">
            <EditForm Model=@voucher OnValidSubmit=@SaveButton OnInvalidSubmit=@ErrorMsg>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <Card ToolOptions="new CardToolOptions { Collapsable = true, Maximizable=true}">
                    <Title><CardTitle>Add Voucher</CardTitle></Title>
                    <Header><CardTools /></Header>
                    <Body>
                        <Row>
                            <Column Classes="col.lg">
                                @*  <ASelect Label="Voucher Type" Name="VoucheType" TItem="string" Items="vchTypes" Selector="(x => x)" />*@
                                <RadzenRadioButtonList Orientation="Orientation.Horizontal" TValue="int" @bind-Value=@SelectedVCHType Change=@((args) => OnVoucherTypeChange(args, "VoucherType"))>

                                    <Items>
                                        <RadzenRadioButtonListItem Text="Payment" Value="0" />
                                        <RadzenRadioButtonListItem Text="Receipts" Value="1" />
                                        <RadzenRadioButtonListItem Text="Expenses" Value="6" />
                                    </Items>

                                </RadzenRadioButtonList>
                            </Column>


                            @* <Column Classes="col.md">
                            @if (IsEdit)
                            {
                            <ATextInput @bind-Value=@voucher.VoucherNumber Name="VoucherNumber" Label="Voucher Number" />
                            }

                            </Column>*@


                            <Column Classes="col.md">
                                <ATextInput @bind-Value=@voucher.StoreId Name="Store" Label="Store" />
                            </Column>
                        </Row>
                        <Row>
                            <Column Classes="col.md">
                                <div class="mb-3 row">
                                    <label for="ondate" class="col-sm-4 col-form-label">Date</label>
                                    <div class="col-sm-6">
                                        <RadzenDatePicker @bind-Value=@voucher.OnDate id="ondate" Change=@OnDateChange />
                                    </div>
                                </div>


                            </Column>
                            <Column Classes="col.md"><ATextInput @bind-Value=@voucher.SlipNumber Name="SlipNo" Label="Slip No" /></Column>
                            <Column Classes="col.md">
                                <ATextInput @bind-Value=@voucher.PartyName Name="PartyName" Label="Party Name" />
                            </Column>
                        </Row>
                        <Row>
                            <Column Classes="col.md"><ATextInput @bind-Value=@voucher.Particulars Name="Particulars" Label="Particulars" /></Column>
                            <Column Classes="col.md"><AInputNumber @bind-Value=@voucher.Amount Name="Amount" Label="Amount" /></Column>
                            <Column Classes="col.md">
                                <ASelect Label="Payment Mode" Name="PayMode" TItem="string" Items="payModes" Selector="(x => x)" />
                            </Column>

                        </Row>
                        <Row>
                            <Column Classes="col.md"><ATextInput @bind-Value=@voucher.AccountId Name="AccountId" Label="Account No" /></Column>
                            <Column Classes="col.md"><ATextInput @bind-Value=@voucher.PaymentDetails Name="Details" Label="Payment Details" /></Column>
                            <Column Classes="col.md"><ATextInput @bind-Value=@voucher.PartyId Name="Party" Label="Party" /></Column>
                        </Row>
                        <Row>
                            <Column Classes="col.md"><ATextInput @bind-Value=@voucher.Remarks Name="Remarls" Label="Remarks" /></Column>
                            <Column Classes="col.md"><ATextInput @bind-Value=@voucher.EmployeeId Name="Issued" Label="Issued By" /></Column>
                            <Column Classes="col.sm"></Column>
                        </Row>


                    </Body>
                    <Footer>
                        <Column Classes="col.md._3">
                            <ASubmitButton Title="Save" />
                        </Column>
                    </Footer>
                </Card>
            </EditForm>
        </Column>
    </Row>
</ContentMain>




@code {
    //TODO: Use bind value in place change in ASelect and See what happen
    [Parameter]
    public VoucherType VoucherType { get; set; } = VoucherType.Payment;
    [Parameter]
    public string VoucherNumber { get; set; } = "";
    [Parameter]
    public bool IsEdit { get; set; } = false;

    private TransactionMode ModeT = new TransactionMode();

    int SelectedVCHType = 0;
    void OnVoucherTypeChange(int? value, string name)
    {
        voucher.VoucherType = (VoucherType)value;
    }

    IList<string> payModes = Enum.GetNames(typeof(PaymentMode));
    IList<string> vchTypes = Enum.GetNames(typeof(VoucherType));

    string _selectedStringItem;

    void onPayModeChange(string value) => voucher.PaymentMode = (PaymentMode)payModes.IndexOf(value);
    //void onVoucherChange(string value) => _selectedStringItem = value;


    [Parameter] public Voucher EditVoucher { get; set; }
    private Voucher voucher = null;
    private string Title = "Voucher";
    void ErrorMsg()
    {
        var msg = new Radzen.NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Summary = "Error",
                Detail = "Invalid Sate",
                Duration = 4000
            };
        NotificationService.Notify(msg);
    }
    void SaveButton()
    {
        Save();

    }

    //private void Save(){}
    private async void Save()
    {
        var result = await Http.PostAsJsonAsync<Voucher>("TransactionModes", voucher);


        if (result.IsSuccessStatusCode)
        {
            var msg = new Radzen.NotificationMessage
                {
                    Severity = NotificationSeverity.Info,
                    Summary = "Info",
                    Detail = "Voucher is added",
                    Duration = 4000
                };
            NotificationService.Notify(msg);

        }
        else
        {
            var msg = new Radzen.NotificationMessage
                {
                    Severity = NotificationSeverity.Info,
                    Summary = "Error",
                    Detail = "An error occured while saving and error is " + result.StatusCode.ToString(),
                    Duration = 4000
                };
            NotificationService.Notify(msg);
        }
    }

    protected override async Task OnInitializedAsync()
    {

        if (IsEdit)
        {
            Title = "Edit Voucher #" + VoucherNumber;
            voucher = EditVoucher;
        }
        else
        {
            Title = "Add " + Title;
            voucher = new Voucher
                {
                    OnDate = DateTime.Now,
                    VoucherType = VoucherType.Payment,
                    AccountId = "",
                    Amount = 0,
                    EmployeeId = "",
                    EntryStatus = EntryStatus.Added,
                    IsReadOnly = false,
                    MarkedDeleted = false,
                    PartyId = "",
                    PartyName = "",
                    PaymentDetails = "",
                    Remarks = "",
                    SlipNumber = "",
                    PaymentMode = PaymentMode.Cash,
                    StoreId = "",
                    UserId = "",
                    VoucherNumber = ""
                };
        }
        voucher.VoucherType = VoucherType;
        SelectedVCHType = (int)VoucherType;
    }

    //Swal.fire('Any fool can use a computer')
    void OnDateChange(DateTime? value) => voucher.OnDate = value.Value;
}

