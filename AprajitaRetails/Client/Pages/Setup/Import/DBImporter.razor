@page "/importdata"
@inject HttpClient Http
@using System.IO;
@using AprajitaRetails.Shared.Models.Stores
@using AprajitaRetails.Client.AdminLte
@using AprajitaRetails.Shared.Models.Vouchers;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using AprajitaRetails.Shared.ViewModels
@inject NotificationService NotificationService


<ContentHeader>
    <Header> <Blazor.AdminLte.PageTitle Title="Db Import" /></Header>
</ContentHeader>
<ContentMain>
    @if (fileList == null)
    {
        <p><em>Loading ....</em></p>
    }
    else
    {
        <H3>List of File</H3>
        <p>Class List</p>
        <AprajitaRetails.AdminLte.Forms.ASelect Label="Table Name" Name="TableName" TItem="FileModel" Selector="(x => x.FileName)" Items="fileList" ValueChanged="@LoadJsonData">

        </AprajitaRetails.AdminLte.Forms.ASelect>

    }
</ContentMain>


@code {

    List<FileModel>? fileList;
    string sPath = "";

    async void LoadJsonData(FileModel fm)
    {
        string path = fm.Path;
        sPath = path;
        try
        {
            var result = await Http.GetFromJsonAsync<bool>($"ImportHelper/Add?path={path}");
            if (result)
            {
                Msg("Saved", $"Table : ${fm.FileName} is saved");
            }
            else
            {
                Msg("Error", $"Table : ${fm.FileName}  is not saved!, Some error occured!",true);
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            fileList = await Http.GetFromJsonAsync<List<FileModel>>("ImportHelper");

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    void Msg(string title, string msg , bool error=false)
    {
        var nft = new Radzen.NotificationMessage
        {
            Severity = error?NotificationSeverity.Error: NotificationSeverity.Info,
            Summary = title,
            Detail = msg,
            Duration = 24000
        };
        NotificationService.Notify(nft);
    }
}
