@page "/register"
@*@using Security.Abstractions.Models.Accounts;*@
@inject NavigationManager NavigationManager
@using AprajitaRetails.Shared.Models.Auth
@using AprajitaRetails.Shared.Models.Vouchers;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using AprajitaRetails.Shared
@*//@attribute [Authorize]*@
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject NotificationService NotificationService
@inject IHttpClientFactory ClientFactory

@*//@inject IUserApiClient UserApiClient*@
<!-- note: using styles, not css, we will target Isolated CSS for this component when we upgrade to .NET5 -->
<AprajitaRetails.AdminLte.AOverlay>
    <div style=" margin: 0 auto; margin-top: 10%; max-width: 400px;">
        <div class="register-box bg-primary bg-gradient">
            <div class="register-logo">
                <a href="#"><b>@CompanyName</b></a>
            </div>
            <div class="card">
                <div class="card-body register-card-body">
                    <p class="login-box-msg">Register a new user</p>
                    @* <form action="../../index.html" method="post">
                    *@
                    <Input @bind-Value="fullName" />
                    <Input @bind-Value="userName" />
                    <Input @bind-Value="email" />
                    <Input @bind-Value="password" />
                    <Input @bind-Value="passwordVerify" />
                    <Input @bind-Value="storeid" />
                    <Input @bind-Value="employeeid" />
                    <Input @bind-Value="storeGroupId" />

                    @* <Input @bind-Value="appClinetId" />
                    <Input @bind-Value="permission" /> *@

                    <div class="row">
                        <div class="col-8">
                            <CustomCheckbox @bind-Value="isAgreeTos" />
                        </div>
                        @*@if (captchaGenerateResponse != null)
                        { Need to update
                        <img src="@captchaGenerateResponse.Image" />
                        <Input @bind-Value="captchaKey" />
                        }*@
                        <div class="col-4">
                            <Button Color="Color.Warning" OnClick="OnAddNewUser">Register</Button>
                        </div>

                    </div>
                    @* </form>*@
                    @if (!string.IsNullOrEmpty(alertBody))
                    {
                        <Blazor.AdminLte.Alert Type="AlertType.Danger" Title="@alertTitle">
                            @((MarkupString)alertBody)
                        </Blazor.AdminLte.Alert>
                    }
                    @*
                    <div class="social-auth-links text-center">
                    <p>- OR -</p>
                    <a href="#" class="btn btn-block btn-primary">
                    <i class="fab fa-facebook mr-2"></i>
                    Sign up using Facebook
                    </a>
                    <a href="#" class="btn btn-block btn-danger">
                    <i class="fab fa-google-plus mr-2"></i>
                    Sign up using Google+
                    </a>
                    </div>*@
                    <a href="login" class="text-center">Login</a>
                </div>

            </div>
        </div>
    </div>
</AprajitaRetails.AdminLte.AOverlay>
@code {

    string CompanyName = "Aprajita Retails";
    string alertBody;
    string alertTitle;

    // CaptchaGenerateResponse captchaGenerateResponse;

    InputState fullName = new InputState() { Identifier = "fullName", Placeholder = "Enter Full Name", Type = "text" };
    InputState userName = new InputState() { Identifier = "userName", Placeholder = "Enter UserName", Type = "text" };
    InputState storeid = new InputState() { Identifier = "storeid", Placeholder = "Enter Store Code", Type = "text" };
    InputState employeeid = new InputState()
        {
            Identifier = "employeeid",
            Placeholder = "Enter Employee id",
            Type = "text"
        };

    InputState userType = new InputState() { Identifier = "userType", Placeholder = "Enter User Type", Type = "text" };
    InputState premission = new InputState() { Identifier = "permission", Placeholder = "Enter Permission", Type = "text" };
    InputState storeGroupId = new InputState()
        {
            Identifier = "storeGroupId",
            Placeholder = "Enter Store Group Id",
            Type =
        "text"
        };
    InputState appClientId = new InputState()
        {
            Identifier = "appClinetId",
            Placeholder = "Enter App Clinet Id",
            Type =
        "text"
        };

    @*//Icon = "fas fa-user" };
//IconBgColor = Color.Info };*@
    InputState email = new InputState() { Identifier = "email", Placeholder = "Enter email", Type = "email" };
    //Icon = "fas fa-envelope" };
    InputState password = new InputState() { Identifier = "password", Placeholder = "Enter password", Type = "password" };
    //Icon = "fas fa-lock" };
    InputState passwordVerify = new InputState()
        {
            Identifier = "passwordVerify",
            Placeholder = "Verify password",
            Type =
        "password"
        };
    @*Icon = "fas fa-lock" };*@
    InputState captchaKey = new InputState() { Identifier = "captchaKey", Placeholder = "Enter Captcha", Type = "text" };
    //Icon = "fas fa-sync", IconBgColor = Color.Warning };

    CustomCheckboxState isAgreeTos = new CustomCheckboxState()
        {
            Identifier = "isAgreeTos",
            Value = "true",
            Label = "I agree to the <a href='#'>terms</a>"
        };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;
        //captchaGenerateResponse = await UserApiClient.CaptchaAsync();
        StateHasChanged();
    }

    async void OnAddNewUser()
    {
        try
        {
            if (password.Value == passwordVerify.Value)
            {
                RegisterUserVM vm = new RegisterUserVM
                    {
                        //TODO: to be enabled
                        StoreGroupId=storeGroupId.Value,
                        //AppClientId=appClientId.Value,
                        //Permission=permission,
                        //UserType=userType.Value,
                        
                        Email = email.Value,
                        EmployeeId = employeeid.Value,
                        FullName = fullName.Value,
                        UserName = userName.Value,
                        Password = password.Value,
                        StoreId = storeid.Value
                    };
                var client = ClientFactory.CreateClient("AprajitaRetails.ServerAPI.Auth");
                var login = await client.PostAsJsonAsync<RegisterUserVM>("api/auths/register", vm);

                if (login.IsSuccessStatusCode)
                {
                    //Redirect to page or home
                    NavigationManager.NavigateTo("/home");
                    var msg = new Radzen.NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Summary = "Success",
                            Detail = "New User is added and logged in!",
                            Duration = 14000
                        };
                    NotificationService.Notify(msg);
                }
                else
                {
                    // Display error message
                    var msg = new Radzen.NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error",
                            Detail = "err" + login.Content,
                            Duration = 14000
                        };
                    NotificationService.Notify(msg);

                }
            }
            else
            {
                //Alert password mismatch
                var msg = new Radzen.NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = "Password not matched!",
                        Duration = 14000
                    };
                NotificationService.Notify(msg);
            }
        }
        catch (Exception)
        {
        }
    }

    async void OnRegister()
    {
        //try
        //{
        // await UserApiClient.RegisterAsync(new RegisterRequest()
        // {
        // AcceptTerms = true,
        // Email = email.Value,
        // FirstName = fullName.Value,
        // LastName = "bla",
        // Title = "",
        // Password = password.Value,
        // ConfirmPassword = passwordVerify.Value
        // });
        // NavigationManager.NavigateTo("thanks-for-registering");
        //}
        //catch (ApiException ex)
        //{
        // var l = ex.ResponseObject;
        // alertTitle = l.Title;
        // alertBody = "";
        // email.Validate(l.Errors.Email);
        // password.Validate(l.Errors.Password);
        // fullName.Validate(l.Errors.FirstName);
        // passwordVerify.Validate(l.Errors.ConfirmPassword);
        // StateHasChanged();
        //}
    }
}