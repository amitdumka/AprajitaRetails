@namespace AprajitaRetails.Aks
@using AprajitaRetails.Shared.ViewModels;
@using Syncfusion.Blazor.Grids
@using AprajitaRetails.Shared.Models.Vouchers

@typeparam TItem

<ContentHeader>
    <Header> <Blazor.AdminLte.PageTitle Title="@Title" /></Header>
</ContentHeader>
<ContentMain>

    <SfGrid TValue="TItem" DataSource="@Entities"
            Toolbar="@toolbar" ContextMenuItems="@contextMenuItem"
            AllowFiltering=true AllowSelection=true AllowSorting=true AllowTextWrap=true AllowGrouping=@Grouping
            AllowExcelExport="true" AllowPdfExport="true" AllowResizing="true" AllowPaging="true" ShowColumnChooser="true"
            ID="Grid" @ref="Grid" Columns="@Columns" EnableAltRow="false">

        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
        @if (Grouping)
        {
            <GridGroupSettings EnableLazyLoading="true" ShowDropArea="true" Columns=@GroupedColumn ShowToggleButton="false"></GridGroupSettings>
        }
        <GridPageSettings PageCount="5"></GridPageSettings>
    </SfGrid>
</ContentMain>

@code {
    SfGrid<TItem>? Grid;

    [Parameter] public string Title { get; set; } = " ";
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public List<TItem> Entities { get; set; }
    [Parameter] public bool EnableAggretor { get; set; } = false;
    [Parameter] public string AggTitle { get; set; } = "";
    [Parameter] public string AggSumField { get; set; } = "";

    [Parameter] public List<GridColumn> Columns { get; set; }
    [Parameter] public EventCallback<List<TItem>> EntitiesChanged { get; set; }
    [Parameter] public bool Grouping { get; set; } = true;
    [Parameter] public string[] GroupedColumn { get; set; }
    [Parameter] public EventCallback<string[]> GroupedColumnChanged { get; set; }

    //Toolbar
    List<string> toolbar = new List<string>() { "Print", "ExcelExport", "PdfExport", "ColumnChooser", "Search" };
    List<object> contextMenuItem = new List<object>() { "AutoFit", "AutoFitAll", "SortAscending", "SortDescending", "Delete", "Cancel", "FirstPage", "PrevPage", "LastPage", "NextPage" };

    private async Task OnGroupedColumnChanged(ChangeEventArgs e)
    {
        if (Grouping)
        {
            GroupedColumn = (string[])e?.Value;
            await GroupedColumnChanged.InvokeAsync(GroupedColumn);
        }
    }
    private async Task OnEntityChanged(ChangeEventArgs e)
    {
        Entities = (List<TItem>)e?.Value;
        await EntitiesChanged.InvokeAsync(Entities);
        if (Grid != null)
        {
            await Grid.AutoFitColumnsAsync();
            StateHasChanged();
        }

    }

    protected override async Task OnInitializedAsync()
    {
        StateHasChanged();
    }

}

@*//https://blazor.syncfusion.com/documentation/datagrid/columns
//https://www.syncfusion.com/forums/164922/dynamic-data-binding-in-grid-without-defining-column-in-design-time
//https://www.syncfusion.com/forums/146129/programatically-create-change-columns-on-the-fly
//https://www.syncfusion.com/forums/172348/grid-auto-fit-dynamically
//https://www.syncfusion.com/forums/172348/grid-auto-fit-dynamically
//https://www.syncfusion.com/forums/160040/conditional-templating-with-dynamic-columns
//https://www.syncfusion.com/forums/169160/programmatically-add-columns
//https://www.google.com/search?q=syncfusion+blazor+datagrid+dynamic+columns&oq=syncfusion+blazor+datagrid+columns&aqs=chrome.3.69i57j0i22i30l6j69i60.16755j0j7&sourceid=chrome&ie=UTF-8*@